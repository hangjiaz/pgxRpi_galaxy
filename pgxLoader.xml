<tool id="pgxLoader" name="pgxRpi pgxLodaer" version="0.1.0+galaxy0" profile="21.05">
    <requirements>
        <requirement type="package" version="4.4.2">r-base</requirement>
        <requirement type="package" version="1.20">bioconductor-pgxrpi</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$run_pgxLoader'
    ]]></command>
    <configfiles>
        <configfile name='run_pgxLoader'><![CDATA[
            ## Setup R error handling to go to stderr
            options(show.error.messages=F, error = function () { cat(geterrmessage(), file=stderr()); q("no", 1, F) })

            library('pgxRpi')    
        
            real_output <- '$advanced_settings.output'

            if ('$type' != "g_variants" | real_output == "Default"){
                real_output <- NULL
            }

            process_input_parameter <- function(param){
                if (param == ""){
                    param <- NULL
                }
                else{
                    param <- trimws(unlist(strsplit(param,split=',')))
                }
                return(param)   
            }

            biosample_ids <- process_input_parameter('$biosample_id')
            individual_ids <- process_input_parameter('$individual_id')
            filters <- process_input_parameter('$filters')
            dataset <- process_input_parameter('$advanced_settings.dataset')            

            ## adapt to old version of this package (1.2.0) 
            if ('$type' == "filtering_terms"){
                result <- data.frame(filters=pgxFilter())
            } else{
                result <- pgxLoader(type='$type',output=real_output,biosample_id=biosample_ids,individual_id=individual_ids,filters=filters,codematches='$codematches',skip=as.numeric($advanced_settings.skip),limit=as.numeric('$advanced_settings.limit'),dataset=dataset,domain='$advanced_settings.domain',entry_point='$advanced_settings.entry_point')
            }
 
            append <- FALSE

            ## adapt to tsv format
            if ('$type' == "cnv_frequency"){
                metadata <- S4Vectors::mcols(result)
                metadata_lines <- paste0("#group_id=",metadata[['filter']],";label=",metadata[['label']],";sample_count=",metadata[['sample_count']])
                write.table(metadata_lines,file='$pgxdata', quote=FALSE, col.names=FALSE, row.names=FALSE)
                append <- TRUE
            } else if ('$type' == "cnv_fraction"){
                result <- cbind(analysis_id=rownames(result[["genome_cnv_frac"]]),result[["genome_cnv_frac"]],result[["chr_cnv_frac"]],result[["arm_cnv_frac"]])
            }

            suppressWarnings(write.table(result, file='$pgxdata', append=append, quote=FALSE, col.names=TRUE, row.names=FALSE, sep = '\t'))        
        ]]></configfile>
    </configfiles>
    <inputs>
        <param name='type' type='select' label='Output data type'>
            <option value="individuals">individuals</option>
            <option value="biosamples">biosamples</option>
            <option value="analyses">analyses</option>
            <option value="g_variants">genomic variations</option>
            <option value="cnv_frequency">precomputed CNV frequency data from Progenetix</option>
            <option value="cnv_fraction">CNV fraction per sample based on Progenetix data</option>
            <option value="sample_count">count of samples in Progenetix</option>
            <option value="filtering_terms">All available filters in Progenetix</option>
        </param>
        <param name='biosample_id' type='text' optional='true' label='Identifiers of biosamples' help='Use commas to separate multiple IDs (e.g. pgxbs-m3io46hq,pgxbs-m3io41c2). If the output data type is "genomic variations", only this search condition is supported.' />
        <param name='individual_id' type='text' optional='true' label='Identifiers of individuals' help='Use commas to separate multiple IDs (e.g. pgxind-m3io3pzi,pgxind-m3io3mi3).'/>
        <param name='filters' type='text' optional='true' label='Filters' help='Use commas to combine filters (e.g. NCIT:C3512,PMID:37084736) using AND logic when the output data type is "individuals", "biosamples", "analyses"; OR logic when the output data type is "precomputed CNV frequency", "count of samples". Do not use multiple filters when the output data type is "CNV fraction".' />
        <param name='codematches' type='boolean' checked='false' label='Whether to exclude samples from child concepts of the specified filters' />
        <section name="advanced_settings" title="Advanced settings" expanded="false">
            <param name='output' type='select' value="Default" optional="true" label='Variant data format'>
                <option value="Default" selected="true">Default</option>
                <option value="pgxseg">pgxseg</option>
                <option value="seg">seg</option>
            </param>
            <param name='limit' type='integer' value='0' optional='true' label='Integer to specify the number of returned profiles' />  
            <param name='skip' type='integer' value='0' optional='true' label='Integer specifying the number of profiles to skip' />
            <param name='dataset' type='text' optional='true' label='Dataset to query from the Beacon response' help='Use commas to separate multiple datasets to enter' />
            <param name='domain' type='text' value="http://progenetix.org" optional='true' label='Domain of the query data resource' />
            <param name='entry_point' type='text' value="beacon" optional='true' label='Entry point of the Beacon v2 API' />
        </section>
    </inputs>
    <outputs>
        <data name="pgxdata" format="txt" label="${tool.name} for $type data" />
    </outputs>
    <tests>
        <test>
            <param name="type" value="biosamples"/>
            <param name="biosample_id" value="pgxbs-kftvki7h"/>
            <output name="pgxdata" file="biosamples.txt" />
        </test>
    </tests>
    <help><![CDATA[
        pgxRpi is an R wrapper package for Progenetix REST API that leverages the capabilities of Beacon v2 specification.
    ]]></help>
    <citations>
        <citation type='doi'>10.18129/B9.bioc.pgxRpi</citation>
    </citations>
</tool>