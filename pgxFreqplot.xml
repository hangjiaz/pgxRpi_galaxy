<tool id="pgxFreqplot" name="pgxRpi pgxFreqplot" version="0.1.0+galaxy0" profile="21.05">
    <requirements>
        <requirement type="package" version="4.4.2">r-base</requirement>
        <requirement type="package" version="1.20">bioconductor-pgxrpi</requirement>
        <requirement type="package" version="1.58.0">bioconductor-genomicranges</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$run_pgxFreqplot'
    ]]></command>
    <configfiles>
        <configfile name='run_pgxFreqplot'><![CDATA[
            ## Setup R error handling to go to stderr
            options(show.error.messages=F, error = function () { cat(geterrmessage(), file=stderr()); q("no", 1, F) })

            library(pgxRpi)    
            library(GenomicRanges)
            data <- readLines("$freqdata")
            metacolumn <- which(grepl("#",data))
            metadata <- data[which(grepl("#",data))]
            metadata <- lapply(seq_len(length(metadata)), function(i){
                indmeta <- metadata[i]
                indmeta <- unlist(strsplit(indmeta,split = ";"))
                indmeta <- data.frame(filter=gsub("#group_id=","",indmeta[1]),label=gsub("label=","",indmeta[2]),sample_count=gsub("sample_count=","",indmeta[3]))
                return(indmeta)
            })
            metadata <- do.call(rbind,metadata)
            data <- read.csv("$freqdata",sep="\t",skip = max(metacolumn),header = T)
            freq <- makeGRangesListFromDataFrame(data,split.field = 'group_name',keep.extra.columns=TRUE) 
            S4Vectors::mcols(freq) <- metadata

            process_input_parameter <- function(param, if_numeric=FALSE){
                if (param == ""){
                    param <- NULL
                }
                else{
                    param <- trimws(unlist(strsplit(param,split=',')))
                    if (if_numeric) param <- as.numeric(param)
                }
                return(param)   
            }

          
            chrom <- process_input_parameter('$chrom',TRUE)
            filters <- process_input_parameter('$filters')
            layout <- process_input_parameter('$layout',TRUE)
         
            pdf("$pgxplot",width=$plotwidth,height=$plotheight)
            pgxFreqplot(freq,filters=filters,chrom=chrom,layout=layout,assembly="$assembly")
            dev.off()
        ]]></configfile>
    </configfiles>
    <inputs>
        <param type='data' name='freqdata' format='txt' label='CNV frequency data' help='CNV frequency data returned by pgxLodaer'/>
        <param name='chrom' type='text' optional='true' label='Chromosomes to plot' help='Use commas to separate multiple chromosomes (e.g. 1,3,5). If not specified, the plot will cover the entire genome.' />
        <param name='layout' type='text' optional='true' label='Number of rows and columns in plot' help='Use commas to separate rows and columns (e.g. 3,1). Only used in plot by chromosome.'/>
        <param name='filters' type='text' optional='true' label='Filter to plot' help='Only support one filter.' />
        <param name='assembly' type='select' label='Genome assembly version'>
            <option value="hg38" selected="true">hg38</option>
            <option value="hg19">hg19</option>
        </param>
        <param name='plotwidth' type='integer' value='8' label='Width of the plot in inches.' />
        <param name='plotheight' type='integer' value='4' label='Height of the plot in inches.' />
    </inputs>
    <outputs>
        <data name='pgxplot' format='pdf' label='CNV frequency plot'/>
    </outputs>
    <tests>
        <test>
            <param name='freqdata' value='cnv-frequency.txt'/>
            <param name="filters" value="NCIT:C3058"/>
            <output name="pgxplot" file="cnv-frequency.pdf" />
        </test>
    </tests>
    <help><![CDATA[
       Thie function plots the CNV frequency loaded from pgxRpi
    ]]></help>
    <citations>
        <citation type='doi'>10.18129/B9.bioc.pgxRpi</citation>
    </citations>
</tool>